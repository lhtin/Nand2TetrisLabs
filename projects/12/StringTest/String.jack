// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int len;
    field int maxLen;
    field int p;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        let maxLen = maxLength;
        if (maxLen = 0) {
            return this;
        }
        // do Output.printInt(maxLength);
        // do Output.println();
        let p = Memory.alloc(maxLen);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (maxLen > 0) {
            do Memory.deAlloc(p);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return p[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let p[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let p[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        let p[len] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int n, i;
        var boolean isNeg;

        let i = 0;
        // 确定正负
        if (p[i] = 45) { // '-'
            let isNeg = true;
            let i = i + 1;
        } else {
            let isNeg = false;
        }

        while (~(p[i] < 48) & ~(p[i] > 57)) {
            let n = (n * 10) + (p[i] - 48);
            let i = i + 1;
        }
        if (isNeg) {
            let n = -n;
        }
        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int q, c, i, n;
        var boolean isNeg, noZero;

        if (val = ~32767) {
            let p[0] = 45; // '-';
            let p[1] = 51; // '3';
            let p[2] = 50; // '2';
            let p[3] = 55; // '7';
            let p[4] = 54; // '6';
            let p[5] = 56; // '8';
            let len = 6;
            return;
        }

        let isNeg = val < 0;
        let len = 0;
        if (isNeg) {
            let p[len] = 45; // '-';
            let len = len + 1;
        }

        let n = Math.abs(val);
        let i = 10000;
        let noZero = false;
        while (i > 0) {
            let q = n / i;
            if (q > 0) {
                let noZero = true;
            }
            if (noZero) {
                let p[len] = q + 48;
                let len = len + 1;
            }
            let n = n - (q * i);
            let i = i / 10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
