// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int _y0; // for divide function

    /** Initializes the library. */
    function void init() {
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, n, xBit;
        let sum = 0;
        let shiftedX = x;
        let n = 0;
        let xBit = 1; // 1 2 4 8 ... 2^15
        while (n < 15) {
          if (xBit & y = 0) {
              // doing nothing
          } else {
              sum = sum + shiftedX;
          }
          xBit = xBit + xBit; // next bit
          shiftedX = shiftedX + shiftedX;
          n = n + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        if (y > x) {
            return 0;
        }
        let q = divide(x, y + y);
        if (q = 0) {
            // 如果为0，说明2 * y > x，所以这时_y0 = y;
            let _y0 = y;
            return 1;
        }
        // x / (2 * y) => q ... c
        if ((x - _y0) < y) {
            // c < y，说明x / y => 2 * q 余 c
            return q + q;
        } else {
            // c >= y，说明 x / y => 2 * q + 1 余 c - y
            let _y0 = _y0 + y;
            return q + q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // [a, b]（初始0 ~ x） 不停地搜索，知道a == b
        var int a, b, m;
        let a = 0;
        let b = x;
        while (a < b) {
          let m = (a + b) / 2;
          if ((m * m) < x) {
              let a = m;
          } else {
              let b = m;
          }
        }
        return a;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
