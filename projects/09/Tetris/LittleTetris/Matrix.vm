function Matrix.new 2
push constant 6
call Memory.alloc 1
pop pointer 0
push constant 1
pop this 0
push constant 1
pop this 1
push constant 10
pop this 2
push constant 22
pop this 3
push pointer 0
call Matrix.getNewTable 1
pop this 4
push constant 0
pop this 5
push pointer 0
return
function Matrix.getNewTable 4
push argument 0
pop pointer 0
push this 2
push constant 1
add
call Array.new 1
pop local 2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
gt
not
not
if-goto WHILE_END0
push this 3
push constant 1
add
call Array.new 1
pop local 3
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 3
gt
not
not
if-goto WHILE_END1
push local 1
push local 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push local 2
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 2
return
function Matrix.setTetromino 0
push argument 0
pop pointer 0
push this 5
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
call Tetromino.dispose 1
pop temp 0
label IF_FALSE0
push argument 1
pop this 5
push constant 0
return
function Matrix.getList 1
push argument 0
pop pointer 0
push constant 0
call MyArray.new 1
pop local 0
push this 5
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
return
label IF_FALSE0
push local 0
push constant 4
call MyArray.setLen 2
pop temp 0
push local 0
push this 5
push argument 1
push argument 2
call Tetromino.getXYList 3
call MyArray.setA 2
pop temp 0
push local 0
return
function Matrix.canFall 7
push argument 0
pop pointer 0
push pointer 0
push constant 0
push constant 1
neg
call Matrix.getList 3
pop local 0
push local 0
call MyArray.getA 1
pop local 1
push local 0
call MyArray.getLen 1
pop local 5
push constant 0
pop local 4
push constant 0
not
pop local 6
label WHILE_EXP0
push local 4
push local 5
lt
push local 6
and
not
if-goto WHILE_END0
push local 4
push local 1
add
pop pointer 1
push that 0
pop local 3
push local 3
call XY.getX 1
push this 4
add
pop pointer 1
push that 0
pop local 2
push local 3
call XY.getY 1
push this 1
lt
push local 3
call XY.getY 1
push local 2
add
pop pointer 1
push that 0
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 6
label IF_FALSE0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push pointer 0
push local 0
call Matrix.disposeList 2
pop temp 0
push local 6
return
function Matrix.fall 0
push argument 0
pop pointer 0
push this 5
push constant 1
call Tetromino.fall 2
pop temp 0
push constant 0
return
function Matrix.move 10
push argument 0
pop pointer 0
push argument 1
call Constants.getRight 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 0
goto IF_END0
label IF_FALSE0
push constant 1
neg
pop local 0
label IF_END0
push pointer 0
push local 0
push constant 0
call Matrix.getList 3
pop local 5
push local 5
call MyArray.getA 1
pop local 6
push local 5
call MyArray.getLen 1
pop local 2
push constant 0
pop local 1
push constant 0
not
pop local 9
label WHILE_EXP0
push local 1
push local 2
lt
push local 9
and
not
if-goto WHILE_END0
push local 1
push local 6
add
pop pointer 1
push that 0
pop local 8
push local 8
call XY.getX 1
pop local 3
push local 8
call XY.getY 1
pop local 4
push local 3
push this 0
lt
push local 3
push this 2
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 9
goto IF_END1
label IF_FALSE1
push local 3
push this 4
add
pop pointer 1
push that 0
pop local 7
push local 4
push local 7
add
pop pointer 1
push that 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 9
label IF_FALSE2
label IF_END1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 9
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 5
push local 0
call Tetromino.move 2
pop temp 0
label IF_FALSE3
push pointer 0
push local 5
call Matrix.disposeList 2
pop temp 0
push local 9
return
function Matrix.canRotate 7
push argument 0
pop pointer 0
push argument 1
call MyArray.getA 1
pop local 4
push argument 1
call MyArray.getLen 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push local 1
lt
not
if-goto WHILE_END0
push local 0
push local 4
add
pop pointer 1
push that 0
pop local 6
push local 6
call XY.getX 1
pop local 2
push local 6
call XY.getY 1
pop local 3
push local 2
push this 0
lt
push local 2
push this 2
gt
or
push local 3
push this 1
lt
or
push local 3
push this 3
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
push local 2
push this 4
add
pop pointer 1
push that 0
pop local 5
push local 3
push local 5
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
function Matrix.rotate 3
push argument 0
pop pointer 0
push constant 5
call Array.new 1
pop local 0
push constant 0
push local 0
add
call Constants.getPoint1 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
call Constants.getPoint2 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
call Constants.getPoint3 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
call Constants.getPoint4 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 0
add
call Constants.getPoint5 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push constant 5
lt
not
if-goto WHILE_END0
push this 5
push argument 1
push local 2
push local 0
add
pop pointer 1
push that 0
call Tetromino.getRotateList 3
pop local 1
push pointer 0
push local 1
call Matrix.canRotate 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
push argument 1
push local 2
push local 0
add
pop pointer 1
push that 0
call Tetromino.rotate 3
pop temp 0
push local 1
call MyArray.dispose 1
pop temp 0
push local 0
call Array.dispose 1
pop temp 0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push local 1
call MyArray.dispose 1
pop temp 0
label IF_END0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
call Array.dispose 1
pop temp 0
push constant 0
return
function Matrix.hardDrop 10
push argument 0
pop pointer 0
push pointer 0
push constant 0
push constant 0
call Matrix.getList 3
pop local 8
push local 8
call MyArray.getA 1
pop local 7
push local 8
call MyArray.getLen 1
pop local 2
push constant 0
pop local 3
push constant 20
pop local 0
label WHILE_EXP0
push local 3
push local 2
lt
not
if-goto WHILE_END0
push local 3
push local 7
add
pop pointer 1
push that 0
pop local 9
push local 9
call XY.getX 1
pop local 4
push local 9
call XY.getY 1
pop local 5
push local 4
push this 4
add
pop pointer 1
push that 0
pop local 6
push constant 0
pop local 1
push local 5
push constant 1
sub
pop local 5
label WHILE_EXP1
push local 5
push this 1
lt
not
push local 5
push local 6
add
pop pointer 1
push that 0
not
and
not
if-goto WHILE_END1
push local 1
push constant 1
add
pop local 1
push local 5
push constant 1
sub
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 1
push local 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
pop local 0
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push this 5
push local 0
call Tetromino.fall 2
pop temp 0
push pointer 0
push local 8
call Matrix.disposeList 2
pop temp 0
push constant 0
return
function Matrix.disposeList 4
push argument 0
pop pointer 0
push argument 1
call MyArray.getA 1
pop local 3
push argument 1
call MyArray.getLen 1
pop local 1
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push local 1
lt
not
if-goto WHILE_END0
push local 2
push local 3
add
pop pointer 1
push that 0
pop local 0
push local 0
call XY.dispose 1
pop temp 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push argument 1
call MyArray.dispose 1
pop temp 0
push constant 0
return
function Matrix.someSame 4
push argument 0
pop pointer 0
push argument 1
call MyArray.getA 1
pop local 0
push argument 1
call MyArray.getLen 1
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push local 2
lt
not
if-goto WHILE_END0
push local 3
push local 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call XY.getX 1
push argument 2
eq
push local 1
call XY.getY 1
and
push argument 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Matrix.getSnapshot 7
push argument 0
pop pointer 0
push pointer 0
push constant 0
push constant 0
call Matrix.getList 3
pop local 2
push this 1
pop local 6
push constant 0
pop local 0
label WHILE_EXP0
push local 6
push this 3
gt
not
not
if-goto WHILE_END0
push this 0
pop local 5
label WHILE_EXP1
push local 5
push this 2
gt
not
not
if-goto WHILE_END1
call Snapshot.new 0
pop local 1
push local 5
push this 4
add
pop pointer 1
push that 0
pop local 3
push local 6
push local 3
add
pop pointer 1
push that 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push constant 1
call Snapshot.setBit 2
pop temp 0
label IF_FALSE0
push pointer 0
push local 2
push local 5
push local 6
call Matrix.someSame 4
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push constant 2
call Snapshot.setBit 2
pop temp 0
label IF_FALSE1
push local 5
push local 6
call XY.new 2
pop local 4
push local 1
push local 4
call Snapshot.setXY 2
pop temp 0
push local 1
push local 0
call ListSnapshot.new 2
pop local 0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Matrix.getHitList 11
push argument 0
pop pointer 0
push constant 0
pop local 1
push pointer 0
push constant 0
push constant 0
call Matrix.getList 3
pop local 0
push local 0
call MyArray.getLen 1
pop local 8
push local 0
call MyArray.getA 1
pop local 4
push constant 0
pop local 7
label WHILE_EXP0
push local 7
push local 8
lt
not
if-goto WHILE_END0
push local 7
push local 4
add
pop pointer 1
push that 0
pop local 6
push local 6
call XY.getY 1
pop local 10
push local 6
call XY.getX 1
pop local 9
push local 1
push local 10
call SetInt.exist 2
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 10
push local 1
call SetInt.new 2
pop local 1
label IF_FALSE0
push local 9
push this 4
add
pop pointer 1
push that 0
pop local 5
push local 10
push local 5
add
push constant 0
not
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 7
push constant 1
add
pop local 7
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 2
push local 1
pop local 3
label WHILE_EXP1
push local 3
push constant 0
eq
not
not
if-goto WHILE_END1
push local 3
call SetInt.getData 1
pop local 10
push this 0
pop local 7
push local 7
push this 4
add
pop pointer 1
push that 0
pop local 5
label WHILE_EXP2
push local 7
push this 2
gt
not
push local 10
push local 5
add
pop pointer 1
push that 0
and
not
if-goto WHILE_END2
push local 7
push constant 1
add
pop local 7
push local 7
push this 2
gt
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 7
push this 4
add
pop pointer 1
push that 0
pop local 5
label IF_FALSE1
goto WHILE_EXP2
label WHILE_END2
push local 7
push this 2
push constant 1
add
eq
push local 2
push local 10
call SetInt.exist 2
not
and
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 10
push local 2
call SetInt.new 2
pop local 2
label IF_FALSE2
push local 3
call SetInt.getNext 1
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 1
call SetInt.dispose 1
pop temp 0
push local 2
return
function Matrix.clear 8
push argument 0
pop pointer 0
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
call Matrix.getNewTable 1
pop local 0
push constant 0
pop local 4
push constant 0
pop local 6
push constant 0
pop local 7
label WHILE_EXP0
push local 6
push this 3
gt
not
not
if-goto WHILE_END0
push argument 1
push local 6
call SetInt.exist 2
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 5
label WHILE_EXP1
push local 5
push this 2
gt
not
not
if-goto WHILE_END1
push local 5
push this 4
add
pop pointer 1
push that 0
pop local 2
push local 5
push local 0
add
pop pointer 1
push that 0
pop local 3
push local 7
push local 3
add
push local 6
push local 2
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP1
label WHILE_END1
push local 7
push constant 1
add
pop local 7
label IF_FALSE1
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 5
label WHILE_EXP2
push local 5
push this 2
gt
not
not
if-goto WHILE_END2
push local 5
push this 4
add
pop pointer 1
push that 0
pop local 1
push local 1
call Array.dispose 1
pop temp 0
push local 5
push constant 1
add
pop local 5
goto WHILE_EXP2
label WHILE_END2
push this 4
call Array.dispose 1
pop temp 0
push local 0
pop this 4
push constant 0
return
function Matrix.getIsOver 2
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 2
gt
not
not
if-goto WHILE_END0
push local 0
push this 4
add
pop pointer 1
push that 0
pop local 1
push this 3
push local 1
add
pop pointer 1
push that 0
push this 3
push constant 1
sub
push local 1
add
pop pointer 1
push that 0
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Matrix.dispose 0
push argument 0
pop pointer 0
push this 4
call Array.dispose 1
pop temp 0
push this 5
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 5
call Tetromino.dispose 1
pop temp 0
label IF_FALSE0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
